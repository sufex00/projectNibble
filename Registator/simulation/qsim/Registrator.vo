// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Lite Edition"

// DATE "11/03/2016 11:49:51"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module dffe3 (
	Q,
	PRN,
	CLRN,
	D,
	CLK,
	ENA);
output 	[2:0] Q;
input 	PRN;
input 	CLRN;
input 	[2:0] D;
input 	CLK;
input 	ENA;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \Q[2]~output_o ;
wire \Q[1]~output_o ;
wire \Q[0]~output_o ;
wire \CLK~input_o ;
wire \D[2]~input_o ;
wire \PRN~input_o ;
wire \CLRN~input_o ;
wire \inst1~1_combout ;
wire \inst1~3_combout ;
wire \inst1~0_combout ;
wire \ENA~input_o ;
wire \inst1~_emulated_q ;
wire \inst1~2_combout ;
wire \D[1]~input_o ;
wire \inst~1_combout ;
wire \inst~_emulated_q ;
wire \inst~0_combout ;
wire \D[0]~input_o ;
wire \inst3~1_combout ;
wire \inst3~_emulated_q ;
wire \inst3~0_combout ;


cyclonev_io_obuf \Q[2]~output (
	.i(\inst1~2_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[2]~output .bus_hold = "false";
defparam \Q[2]~output .open_drain_output = "false";
defparam \Q[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \Q[1]~output (
	.i(\inst~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[1]~output .bus_hold = "false";
defparam \Q[1]~output .open_drain_output = "false";
defparam \Q[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \Q[0]~output (
	.i(\inst3~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[0]~output .bus_hold = "false";
defparam \Q[0]~output .open_drain_output = "false";
defparam \Q[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \CLK~input (
	.i(CLK),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\CLK~input_o ));
// synopsys translate_off
defparam \CLK~input .bus_hold = "false";
defparam \CLK~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \D[2]~input (
	.i(D[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\D[2]~input_o ));
// synopsys translate_off
defparam \D[2]~input .bus_hold = "false";
defparam \D[2]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \PRN~input (
	.i(PRN),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\PRN~input_o ));
// synopsys translate_off
defparam \PRN~input .bus_hold = "false";
defparam \PRN~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \CLRN~input (
	.i(CLRN),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\CLRN~input_o ));
// synopsys translate_off
defparam \CLRN~input .bus_hold = "false";
defparam \CLRN~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \inst1~1 (
// Equation(s):
// \inst1~1_combout  = ( \PRN~input_o  & ( \CLRN~input_o  & ( \inst1~1_combout  ) ) ) # ( !\PRN~input_o  & ( \CLRN~input_o  ) )

	.dataa(gnd),
	.datab(gnd),
	.datac(gnd),
	.datad(!\inst1~1_combout ),
	.datae(!\PRN~input_o ),
	.dataf(!\CLRN~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst1~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst1~1 .extended_lut = "off";
defparam \inst1~1 .lut_mask = 64'h00000000FFFF00FF;
defparam \inst1~1 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \inst1~3 (
// Equation(s):
// \inst1~3_combout  = !\D[2]~input_o  $ (!\inst1~1_combout )

	.dataa(!\D[2]~input_o ),
	.datab(!\inst1~1_combout ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst1~3_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst1~3 .extended_lut = "off";
defparam \inst1~3 .lut_mask = 64'h6666666666666666;
defparam \inst1~3 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \inst1~0 (
// Equation(s):
// \inst1~0_combout  = (!\CLRN~input_o ) # (!\PRN~input_o )

	.dataa(!\CLRN~input_o ),
	.datab(!\PRN~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst1~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst1~0 .extended_lut = "off";
defparam \inst1~0 .lut_mask = 64'hEEEEEEEEEEEEEEEE;
defparam \inst1~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \ENA~input (
	.i(ENA),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\ENA~input_o ));
// synopsys translate_off
defparam \ENA~input .bus_hold = "false";
defparam \ENA~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \inst1~_emulated (
	.clk(!\CLK~input_o ),
	.d(\inst1~3_combout ),
	.asdata(vcc),
	.clrn(!\inst1~0_combout ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ENA~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst1~_emulated_q ),
	.prn(vcc));
// synopsys translate_off
defparam \inst1~_emulated .is_wysiwyg = "true";
defparam \inst1~_emulated .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \inst1~2 (
// Equation(s):
// \inst1~2_combout  = (\CLRN~input_o  & ((!\PRN~input_o ) # (!\inst1~_emulated_q  $ (!\inst1~1_combout ))))

	.dataa(!\inst1~_emulated_q ),
	.datab(!\inst1~1_combout ),
	.datac(!\PRN~input_o ),
	.datad(!\CLRN~input_o ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst1~2_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst1~2 .extended_lut = "off";
defparam \inst1~2 .lut_mask = 64'h00F600F600F600F6;
defparam \inst1~2 .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \D[1]~input (
	.i(D[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\D[1]~input_o ));
// synopsys translate_off
defparam \D[1]~input .bus_hold = "false";
defparam \D[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \inst~1 (
// Equation(s):
// \inst~1_combout  = !\D[1]~input_o  $ (!\inst1~1_combout )

	.dataa(!\D[1]~input_o ),
	.datab(!\inst1~1_combout ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst~1 .extended_lut = "off";
defparam \inst~1 .lut_mask = 64'h6666666666666666;
defparam \inst~1 .shared_arith = "off";
// synopsys translate_on

dffeas \inst~_emulated (
	.clk(!\CLK~input_o ),
	.d(\inst~1_combout ),
	.asdata(vcc),
	.clrn(!\inst1~0_combout ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ENA~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst~_emulated_q ),
	.prn(vcc));
// synopsys translate_off
defparam \inst~_emulated .is_wysiwyg = "true";
defparam \inst~_emulated .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \inst~0 (
// Equation(s):
// \inst~0_combout  = (\CLRN~input_o  & ((!\PRN~input_o ) # (!\inst~_emulated_q  $ (!\inst1~1_combout ))))

	.dataa(!\inst~_emulated_q ),
	.datab(!\inst1~1_combout ),
	.datac(!\PRN~input_o ),
	.datad(!\CLRN~input_o ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst~0 .extended_lut = "off";
defparam \inst~0 .lut_mask = 64'h00F600F600F600F6;
defparam \inst~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \D[0]~input (
	.i(D[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\D[0]~input_o ));
// synopsys translate_off
defparam \D[0]~input .bus_hold = "false";
defparam \D[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \inst3~1 (
// Equation(s):
// \inst3~1_combout  = !\D[0]~input_o  $ (!\inst1~1_combout )

	.dataa(!\D[0]~input_o ),
	.datab(!\inst1~1_combout ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst3~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst3~1 .extended_lut = "off";
defparam \inst3~1 .lut_mask = 64'h6666666666666666;
defparam \inst3~1 .shared_arith = "off";
// synopsys translate_on

dffeas \inst3~_emulated (
	.clk(!\CLK~input_o ),
	.d(\inst3~1_combout ),
	.asdata(vcc),
	.clrn(!\inst1~0_combout ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ENA~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst3~_emulated_q ),
	.prn(vcc));
// synopsys translate_off
defparam \inst3~_emulated .is_wysiwyg = "true";
defparam \inst3~_emulated .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \inst3~0 (
// Equation(s):
// \inst3~0_combout  = (\CLRN~input_o  & ((!\PRN~input_o ) # (!\inst3~_emulated_q  $ (!\inst1~1_combout ))))

	.dataa(!\inst3~_emulated_q ),
	.datab(!\inst1~1_combout ),
	.datac(!\PRN~input_o ),
	.datad(!\CLRN~input_o ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst3~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst3~0 .extended_lut = "off";
defparam \inst3~0 .lut_mask = 64'h00F600F600F600F6;
defparam \inst3~0 .shared_arith = "off";
// synopsys translate_on

assign Q[2] = \Q[2]~output_o ;

assign Q[1] = \Q[1]~output_o ;

assign Q[0] = \Q[0]~output_o ;

endmodule
