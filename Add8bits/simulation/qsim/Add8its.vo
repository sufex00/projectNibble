// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Lite Edition"

// DATE "11/06/2016 00:36:32"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module Suc5bitR (
	Y,
	A);
output 	[5:0] Y;
input 	[5:0] A;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \Y[5]~output_o ;
wire \Y[4]~output_o ;
wire \Y[3]~output_o ;
wire \Y[2]~output_o ;
wire \Y[1]~output_o ;
wire \Y[0]~output_o ;
wire \A[0]~input_o ;
wire \A[4]~input_o ;
wire \A[3]~input_o ;
wire \A[2]~input_o ;
wire \A[1]~input_o ;
wire \A[5]~input_o ;
wire \inst1~combout ;
wire \inst2~combout ;
wire \inst3~combout ;
wire \inst4~combout ;
wire \inst5~combout ;
wire \inst6~combout ;


cyclonev_io_obuf \Y[5]~output (
	.i(\inst1~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Y[5]~output_o ),
	.obar());
// synopsys translate_off
defparam \Y[5]~output .bus_hold = "false";
defparam \Y[5]~output .open_drain_output = "false";
defparam \Y[5]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \Y[4]~output (
	.i(\inst2~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Y[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \Y[4]~output .bus_hold = "false";
defparam \Y[4]~output .open_drain_output = "false";
defparam \Y[4]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \Y[3]~output (
	.i(\inst3~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Y[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \Y[3]~output .bus_hold = "false";
defparam \Y[3]~output .open_drain_output = "false";
defparam \Y[3]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \Y[2]~output (
	.i(\inst4~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Y[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \Y[2]~output .bus_hold = "false";
defparam \Y[2]~output .open_drain_output = "false";
defparam \Y[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \Y[1]~output (
	.i(\inst5~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Y[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \Y[1]~output .bus_hold = "false";
defparam \Y[1]~output .open_drain_output = "false";
defparam \Y[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \Y[0]~output (
	.i(!\inst6~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Y[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \Y[0]~output .bus_hold = "false";
defparam \Y[0]~output .open_drain_output = "false";
defparam \Y[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \A[0]~input (
	.i(A[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\A[0]~input_o ));
// synopsys translate_off
defparam \A[0]~input .bus_hold = "false";
defparam \A[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \A[4]~input (
	.i(A[4]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\A[4]~input_o ));
// synopsys translate_off
defparam \A[4]~input .bus_hold = "false";
defparam \A[4]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \A[3]~input (
	.i(A[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\A[3]~input_o ));
// synopsys translate_off
defparam \A[3]~input .bus_hold = "false";
defparam \A[3]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \A[2]~input (
	.i(A[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\A[2]~input_o ));
// synopsys translate_off
defparam \A[2]~input .bus_hold = "false";
defparam \A[2]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \A[1]~input (
	.i(A[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\A[1]~input_o ));
// synopsys translate_off
defparam \A[1]~input .bus_hold = "false";
defparam \A[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \A[5]~input (
	.i(A[5]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\A[5]~input_o ));
// synopsys translate_off
defparam \A[5]~input .bus_hold = "false";
defparam \A[5]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb inst1(
// Equation(s):
// \inst1~combout  = ( \A[1]~input_o  & ( \A[5]~input_o  & ( (!\A[4]~input_o ) # ((!\A[3]~input_o ) # (!\A[2]~input_o )) ) ) ) # ( !\A[1]~input_o  & ( \A[5]~input_o  ) ) # ( \A[1]~input_o  & ( !\A[5]~input_o  & ( (\A[0]~input_o  & (\A[4]~input_o  & 
// (\A[3]~input_o  & \A[2]~input_o ))) ) ) )

	.dataa(!\A[0]~input_o ),
	.datab(!\A[4]~input_o ),
	.datac(!\A[3]~input_o ),
	.datad(!\A[2]~input_o ),
	.datae(!\A[1]~input_o ),
	.dataf(!\A[5]~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst1~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam inst1.extended_lut = "off";
defparam inst1.lut_mask = 64'h00000001FFFFFFFC;
defparam inst1.shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb inst2(
// Equation(s):
// \inst2~combout  = ( \A[1]~input_o  & ( (!\A[4]~input_o  & (\A[0]~input_o  & (\A[3]~input_o  & \A[2]~input_o ))) # (\A[4]~input_o  & (((!\A[3]~input_o ) # (!\A[2]~input_o )))) ) ) # ( !\A[1]~input_o  & ( \A[4]~input_o  ) )

	.dataa(!\A[0]~input_o ),
	.datab(!\A[4]~input_o ),
	.datac(!\A[3]~input_o ),
	.datad(!\A[2]~input_o ),
	.datae(!\A[1]~input_o ),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst2~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam inst2.extended_lut = "off";
defparam inst2.lut_mask = 64'h3333333433333334;
defparam inst2.shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb inst3(
// Equation(s):
// \inst3~combout  = ( \A[1]~input_o  & ( (!\A[0]~input_o  & (\A[3]~input_o  & ((!\A[4]~input_o ) # (!\A[2]~input_o )))) # (\A[0]~input_o  & ((!\A[3]~input_o  $ (!\A[2]~input_o )))) ) ) # ( !\A[1]~input_o  & ( \A[3]~input_o  ) )

	.dataa(!\A[0]~input_o ),
	.datab(!\A[4]~input_o ),
	.datac(!\A[3]~input_o ),
	.datad(!\A[2]~input_o ),
	.datae(!\A[1]~input_o ),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst3~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam inst3.extended_lut = "off";
defparam inst3.lut_mask = 64'h0F0F0F580F0F0F58;
defparam inst3.shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb inst4(
// Equation(s):
// \inst4~combout  = ( \A[1]~input_o  & ( (!\A[0]~input_o  & (\A[2]~input_o  & ((!\A[4]~input_o ) # (!\A[3]~input_o )))) # (\A[0]~input_o  & (((!\A[2]~input_o )))) ) ) # ( !\A[1]~input_o  & ( \A[2]~input_o  ) )

	.dataa(!\A[0]~input_o ),
	.datab(!\A[4]~input_o ),
	.datac(!\A[3]~input_o ),
	.datad(!\A[2]~input_o ),
	.datae(!\A[1]~input_o ),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst4~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam inst4.extended_lut = "off";
defparam inst4.lut_mask = 64'h00FF55A800FF55A8;
defparam inst4.shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb inst5(
// Equation(s):
// \inst5~combout  = ( \A[1]~input_o  & ( (!\A[0]~input_o  & ((!\A[4]~input_o ) # ((!\A[3]~input_o ) # (!\A[2]~input_o )))) ) ) # ( !\A[1]~input_o  & ( \A[0]~input_o  ) )

	.dataa(!\A[0]~input_o ),
	.datab(!\A[4]~input_o ),
	.datac(!\A[3]~input_o ),
	.datad(!\A[2]~input_o ),
	.datae(!\A[1]~input_o ),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst5~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam inst5.extended_lut = "off";
defparam inst5.lut_mask = 64'h5555AAA85555AAA8;
defparam inst5.shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb inst6(
// Equation(s):
// \inst6~combout  = ( \A[1]~input_o  & ( ((\A[4]~input_o  & (\A[3]~input_o  & \A[2]~input_o ))) # (\A[0]~input_o ) ) ) # ( !\A[1]~input_o  & ( \A[0]~input_o  ) )

	.dataa(!\A[0]~input_o ),
	.datab(!\A[4]~input_o ),
	.datac(!\A[3]~input_o ),
	.datad(!\A[2]~input_o ),
	.datae(!\A[1]~input_o ),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst6~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam inst6.extended_lut = "off";
defparam inst6.lut_mask = 64'h5555555755555557;
defparam inst6.shared_arith = "off";
// synopsys translate_on

assign Y[5] = \Y[5]~output_o ;

assign Y[4] = \Y[4]~output_o ;

assign Y[3] = \Y[3]~output_o ;

assign Y[2] = \Y[2]~output_o ;

assign Y[1] = \Y[1]~output_o ;

assign Y[0] = \Y[0]~output_o ;

endmodule
