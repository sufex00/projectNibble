// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Lite Edition"

// DATE "11/07/2016 08:05:01"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module CentralControl (
	mux_X,
	OP,
	mux_Y,
	out_we,
	ENA,
	CLRN,
	CLK,
	Sai);
output 	mux_X;
input 	[2:0] OP;
output 	mux_Y;
output 	out_we;
input 	ENA;
input 	CLRN;
input 	CLK;
output 	[2:0] Sai;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \OP[2]~input_o ;
wire \mux_X~output_o ;
wire \mux_Y~output_o ;
wire \out_we~output_o ;
wire \Sai[2]~output_o ;
wire \Sai[1]~output_o ;
wire \Sai[0]~output_o ;
wire \OP[1]~input_o ;
wire \OP[0]~input_o ;
wire \CLK~input_o ;
wire \inst|inst4~combout ;
wire \CLRN~input_o ;
wire \ENA~input_o ;
wire \inst1|inst~q ;
wire \inst|inst10~0_combout ;
wire \inst1|inst1~q ;
wire \inst|inst15~combout ;
wire \inst1|inst3~q ;
wire \inst4~combout ;


cyclonev_io_obuf \mux_X~output (
	.i(\OP[1]~input_o ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\mux_X~output_o ),
	.obar());
// synopsys translate_off
defparam \mux_X~output .bus_hold = "false";
defparam \mux_X~output .open_drain_output = "false";
defparam \mux_X~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \mux_Y~output (
	.i(\OP[0]~input_o ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\mux_Y~output_o ),
	.obar());
// synopsys translate_off
defparam \mux_Y~output .bus_hold = "false";
defparam \mux_Y~output .open_drain_output = "false";
defparam \mux_Y~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \out_we~output (
	.i(\inst4~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out_we~output_o ),
	.obar());
// synopsys translate_off
defparam \out_we~output .bus_hold = "false";
defparam \out_we~output .open_drain_output = "false";
defparam \out_we~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \Sai[2]~output (
	.i(\inst1|inst1~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Sai[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \Sai[2]~output .bus_hold = "false";
defparam \Sai[2]~output .open_drain_output = "false";
defparam \Sai[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \Sai[1]~output (
	.i(\inst1|inst~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Sai[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \Sai[1]~output .bus_hold = "false";
defparam \Sai[1]~output .open_drain_output = "false";
defparam \Sai[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \Sai[0]~output (
	.i(\inst1|inst3~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Sai[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \Sai[0]~output .bus_hold = "false";
defparam \Sai[0]~output .open_drain_output = "false";
defparam \Sai[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \OP[1]~input (
	.i(OP[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\OP[1]~input_o ));
// synopsys translate_off
defparam \OP[1]~input .bus_hold = "false";
defparam \OP[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \OP[0]~input (
	.i(OP[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\OP[0]~input_o ));
// synopsys translate_off
defparam \OP[0]~input .bus_hold = "false";
defparam \OP[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \CLK~input (
	.i(CLK),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\CLK~input_o ));
// synopsys translate_off
defparam \CLK~input .bus_hold = "false";
defparam \CLK~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \inst|inst4 (
// Equation(s):
// \inst|inst4~combout  = !\inst1|inst3~q  $ (!\inst1|inst~q )

	.dataa(!\inst1|inst3~q ),
	.datab(!\inst1|inst~q ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst|inst4~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst|inst4 .extended_lut = "off";
defparam \inst|inst4 .lut_mask = 64'h6666666666666666;
defparam \inst|inst4 .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \CLRN~input (
	.i(CLRN),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\CLRN~input_o ));
// synopsys translate_off
defparam \CLRN~input .bus_hold = "false";
defparam \CLRN~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \ENA~input (
	.i(ENA),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\ENA~input_o ));
// synopsys translate_off
defparam \ENA~input .bus_hold = "false";
defparam \ENA~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \inst1|inst (
	.clk(!\CLK~input_o ),
	.d(\inst|inst4~combout ),
	.asdata(vcc),
	.clrn(\CLRN~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ENA~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst1|inst~q ),
	.prn(vcc));
// synopsys translate_off
defparam \inst1|inst .is_wysiwyg = "true";
defparam \inst1|inst .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \inst|inst10~0 (
// Equation(s):
// \inst|inst10~0_combout  = !\inst1|inst1~q  $ (((!\inst1|inst3~q ) # (!\inst1|inst~q )))

	.dataa(!\inst1|inst3~q ),
	.datab(!\inst1|inst~q ),
	.datac(!\inst1|inst1~q ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst|inst10~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst|inst10~0 .extended_lut = "off";
defparam \inst|inst10~0 .lut_mask = 64'h1E1E1E1E1E1E1E1E;
defparam \inst|inst10~0 .shared_arith = "off";
// synopsys translate_on

dffeas \inst1|inst1 (
	.clk(!\CLK~input_o ),
	.d(\inst|inst10~0_combout ),
	.asdata(vcc),
	.clrn(\CLRN~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ENA~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst1|inst1~q ),
	.prn(vcc));
// synopsys translate_off
defparam \inst1|inst1 .is_wysiwyg = "true";
defparam \inst1|inst1 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \inst|inst15 (
// Equation(s):
// \inst|inst15~combout  = (!\inst1|inst3~q ) # ((!\OP[0]~input_o  & (\inst1|inst~q  & !\inst1|inst1~q )))

	.dataa(!\OP[0]~input_o ),
	.datab(!\inst1|inst3~q ),
	.datac(!\inst1|inst~q ),
	.datad(!\inst1|inst1~q ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst|inst15~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \inst|inst15 .extended_lut = "off";
defparam \inst|inst15 .lut_mask = 64'hCECCCECCCECCCECC;
defparam \inst|inst15 .shared_arith = "off";
// synopsys translate_on

dffeas \inst1|inst3 (
	.clk(!\CLK~input_o ),
	.d(\inst|inst15~combout ),
	.asdata(vcc),
	.clrn(\CLRN~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ENA~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst1|inst3~q ),
	.prn(vcc));
// synopsys translate_off
defparam \inst1|inst3 .is_wysiwyg = "true";
defparam \inst1|inst3 .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb inst4(
// Equation(s):
// \inst4~combout  = (\OP[0]~input_o  & (\inst1|inst3~q  & (\inst1|inst~q  & !\inst1|inst1~q )))

	.dataa(!\OP[0]~input_o ),
	.datab(!\inst1|inst3~q ),
	.datac(!\inst1|inst~q ),
	.datad(!\inst1|inst1~q ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\inst4~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam inst4.extended_lut = "off";
defparam inst4.lut_mask = 64'h0100010001000100;
defparam inst4.shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \OP[2]~input (
	.i(OP[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\OP[2]~input_o ));
// synopsys translate_off
defparam \OP[2]~input .bus_hold = "false";
defparam \OP[2]~input .simulate_z_as = "z";
// synopsys translate_on

assign mux_X = \mux_X~output_o ;

assign mux_Y = \mux_Y~output_o ;

assign out_we = \out_we~output_o ;

assign Sai[2] = \Sai[2]~output_o ;

assign Sai[1] = \Sai[1]~output_o ;

assign Sai[0] = \Sai[0]~output_o ;

endmodule
