// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/07/2016 23:01:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLRN;
// wires                                               
wire [4:0] ADDR_PR;
wire [7:0] FIN_PR;
wire [23:0] inst_pr;
wire [7:0] MUX_X_PR;
wire [7:0] MUX_Y_PR;
wire [2:0] OP_PR;
wire [5:0] pc_pr;
wire [7:0] R_PR;
wire [23:0] rom_pr;
wire [7:0] s_PR;
wire [7:0] X_PR;
wire [7:0] Y_PR;

// assign statements (if any)                          
Main i1 (
// port map - connection between master ports and signals/registers   
	.ADDR_PR(ADDR_PR),
	.CLK(CLK),
	.CLRN(CLRN),
	.FIN_PR(FIN_PR),
	.inst_pr(inst_pr),
	.MUX_X_PR(MUX_X_PR),
	.MUX_Y_PR(MUX_Y_PR),
	.OP_PR(OP_PR),
	.pc_pr(pc_pr),
	.R_PR(R_PR),
	.rom_pr(rom_pr),
	.s_PR(s_PR),
	.X_PR(X_PR),
	.Y_PR(Y_PR)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #20000 1'b1;
	#20000;
end 

// CLRN
initial
begin
	CLRN = 1'b0;
	CLRN = #10000 1'b1;
end 
endmodule

